name: Build libheif for Windows

on:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout libheif source
        uses: actions/checkout@v4
        with:
          repository: strukturag/libheif
          submodules: recursive

      - name: Setup MSYS2 + MinGW-w64 + Dependencies
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-libde265
            mingw-w64-x86_64-x265
            mingw-w64-x86_64-aom           # ✅ 修正：原 libaom → aom
            mingw-w64-x86_64-rav1e
            mingw-w64-x86_64-dav1d
            mingw-w64-x86_64-svt-av1

      - name: Create build directory
        run: mkdir build
        shell: msys2 {0}

      - name: Configure with CMake Preset
        working-directory: build
        run: |
          cmake .. --preset ${{ github.event.inputs.preset }}
        shell: msys2 {0}

      - name: Build with CMake
        working-directory: build
        run: |
          cmake --build . --config Release -j $(nproc 2>/dev/null || echo 2)
        shell: msys2 {0}

      - name: Install locally (optional, for headers/libs)
        working-directory: build
        run: |
          cmake --install . --prefix ./install
        shell: msys2 {0}

      - name: Collect binaries and dependencies
        run: |
          mkdir -p ./dist/bin

          # 主要输出文件
          cp ./build/libheif.dll ./dist/bin/ 2>/dev/null || echo "libheif.dll not found (may be static build)"
          cp ./build/libheif.lib ./dist/bin/ 2>/dev/null || echo "libheif.lib not found"
          cp ./build/examples/heif-enc.exe ./dist/bin/ 2>/dev/null || echo "heif-enc.exe not found"
          cp ./build/examples/heif-dec.exe ./dist/bin/ 2>/dev/null || echo "heif-dec.exe not found"

          # 插件（仅当使用 'release' 预设时存在）
          if [ -d ./build/plugins ]; then
            mkdir -p ./dist/plugins
            cp ./build/plugins/*.dll ./dist/plugins/ 2>/dev/null || echo "No plugins found"
          fi

          # 运行时依赖 DLL（来自 MSYS2）
          cp "${MINGW_PREFIX}"/bin/libde265*.dll ./dist/bin/ 2>/dev/null || echo "libde265 not needed or static"
          cp "${MINGW_PREFIX}"/bin/libaom*.dll ./dist/bin/ 2>/dev/null || echo "libaom not needed or static"     # ✅ 文件名仍是 libaom-*.dll
          cp "${MINGW_PREFIX}"/bin/libx265*.dll ./dist/bin/ 2>/dev/null || echo "libx265 not needed or static"
          cp "${MINGW_PREFIX}"/bin/libdav1d*.dll ./dist/bin/ 2>/dev/null || echo "libdav1d not needed"
          cp "${MINGW_PREFIX}"/bin/librav1e*.dll ./dist/bin/ 2>/dev/null || echo "librav1e not needed"
          cp "${MINGW_PREFIX}"/bin/libSvtAv1Enc*.dll ./dist/bin/ 2>/dev/null || echo "SVT-AV1 not needed"

          # MinGW 基础运行时
          cp "${MINGW_PREFIX}"/bin/libgcc_s_seh-1.dll ./dist/bin/
          cp "${MINGW_PREFIX}"/bin/libstdc++-6.dll ./dist/bin/
          cp "${MINGW_PREFIX}"/bin/libwinpthread-1.dll ./dist/bin/

          # 记录构建信息
          echo "libheif version: $(git describe --tags --always --dirty)" > ./dist/VERSION.txt
          echo "Built with preset: ${{ github.event.inputs.preset }}" >> ./dist/VERSION.txt
          echo "Build date: $(date -u)" >> ./dist/VERSION.txt
        shell: msys2 {0}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: libheif-windows-x64-${{ github.event.inputs.preset }}
          path: ./dist/
